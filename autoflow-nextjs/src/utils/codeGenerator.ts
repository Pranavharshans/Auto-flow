import { AgentNode, WorkflowConnection, CodeGenerationResult } from '@/types';

export function generateGoogleADKCode(
  nodes: AgentNode[], 
  edges: WorkflowConnection[]
): CodeGenerationResult {
  try {
    if (nodes.length === 0) {
      return {
        code: '# No agents to generate',
        isValid: false,
        errors: ['At least one agent is required']
      };
    }

    const imports = `# Generated by Autoflow MVP
from google.adk.agents import Agent, SequentialAgent
from google.adk.tools import google_search, code_exec

`;

    // Generate individual agents
    const agentDefinitions = nodes
      .filter(node => node.type === 'llm-agent')
      .map(node => generateAgentCode(node))
      .join('\n\n');

    // Generate workflow logic
    const workflowCode = generateWorkflowCode(nodes, edges);

    // Generate execution code
    const executionCode = `
# Execute workflow
if __name__ == "__main__":
    input_data = "Your input text here"
    result = workflow.process(input_data)
    print("Result:", result)
`;

    const fullCode = imports + agentDefinitions + '\n\n' + workflowCode + executionCode;

    return {
      code: fullCode,
      isValid: true,
      errors: []
    };

  } catch (error) {
    return {
      code: '',
      isValid: false,
      errors: [error instanceof Error ? error.message : 'Unknown error']
    };
  }
}

function generateAgentCode(node: AgentNode): string {
  const safeName = node.name.toLowerCase().replace(/[^a-z0-9]/g, '_');
  const instruction = node.instruction.replace(/"/g, '\\"');
  
  return `# ${node.name}
${safeName} = Agent(
    name="${safeName}",
    model="${node.model}",
    instruction="${instruction}"
)`;
}

function generateWorkflowCode(nodes: AgentNode[], edges: WorkflowConnection[]): string {
  const llmAgents = nodes.filter(node => node.type === 'llm-agent');
  
  if (llmAgents.length === 1) {
    const safeName = llmAgents[0].name.toLowerCase().replace(/[^a-z0-9]/g, '_');
    return `# Single Agent Workflow
workflow = ${safeName}`;
  }
  
  // For multiple agents, create sequential workflow
  const agentNames = llmAgents.map(node => 
    node.name.toLowerCase().replace(/[^a-z0-9]/g, '_')
  );
  
  return `# Sequential Workflow
workflow = SequentialAgent([
    ${agentNames.join(',\n    ')}
])`;
}

export function validateWorkflow(nodes: AgentNode[], edges: WorkflowConnection[]): string[] {
  const errors: string[] = [];
  
  // Check if we have at least one agent
  if (nodes.length === 0) {
    errors.push('At least one agent is required');
  }
  
  // Check if all agents have names and instructions
  nodes.forEach(node => {
    if (!node.name.trim()) {
      errors.push(`Agent ${node.id} needs a name`);
    }
    if (!node.instruction.trim()) {
      errors.push(`Agent ${node.id} needs an instruction`);
    }
  });
  
  return errors;
} 